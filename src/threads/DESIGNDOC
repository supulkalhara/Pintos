			+--------------------+
			|        CS 2042      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- PRELIMINARIES ----

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff. If you fail to do so while your
>> solution contains such material you will be penalized.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct list sleep_list;
    to keep the sleeping threads in a list where we can check to wake them
    up when the time is up.

int64_t wakeup_time;
    this is added to thread struct in thread.h to wake the thread after the
    sleeping is done.

void timer_sleep (int64_t ticks);
    rewriting the code to avoid busy waiting. In here, we are blocking the
    thread. not yielding.

static void timer_interrupt (struct intr_frame *args UNUSED);
    rewriting the code to wake up the sleeping threads that have exceeded
    their wakeup time

bool cmp_wakeup_time(struct list_elem *first, struct list_elem *second, void *aux);
    Sorting threads in a descending order

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
    timer_sleep() - > thread
    thread -> wakeup_time
    thread_block()
    time_inturrupt -> wake



>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
    100 times per sec
    order insert
    break


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
    interrupt_disable()


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
    interrupt_disable()


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    This design avoids busy waiting. In timer_sleep, thread is not yielded
    to the ready state. It is blocked with thread_block().
    In the sleep_list, contains all the sleeping threads in a sorted order.
    Thread is awakened using timer_interrupt() method. since timer runs in
    100 ticks per sec, it can determine the exact time to awake the thread.

    This is superior than ????????????????????????????


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts. You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?